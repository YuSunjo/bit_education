- 작은 block의 데이터를 많이 할당할 때 적합
 - Linked List 같은 자료구조에 적합
- Global Heap은 프로세스 생성과 함께 만들어짐(1 M)

	1. Private Heap
	1) Private heap을 사용하는 이유
	• 상이한 자료구조를 저장해야 할 경우, 자료의 손상 방지
	• 다른 타입의 객체가 동일한 heap에 섞여 있을 경우, 관리의 문제
	• 메모리의 조각화(fragmentation) 방지
	• 잦은 메모리 swapping 방지
	• 빠른 메모리 해제

	2) Private heap 생성
	HANDLE HeapCreate(
	    DWORD fdwOptions,         // 힙 생성 옵션
	    SIZE_T dwInitialSize,     // 힙 초기 크기
	    SIZE_T dwMaximumSize); // 힙 최대 크기
	
	- fdwOptions
		HEAP_CREATE_ENABLE_EXECUTE
			힙 메모리 안의 코드가 어플리케이션에 의해 실행할 수 있게 함
		HEAP_GENERATE_EXCEPTIONS
			HeapAlloc, HeapReAlloc 호출 실패 시 NULL 대신 exception을 발생
		HEAP_NO_SERIALIZE
			쓰레드 순차 접근을 하지 않도록 설정된다.
			즉, 다수의 쓰레드가 동시에 힙 오퍼레이션을 수행하려 할 때 lock/unlock 없이 동시에 치고 들어올 수 있게 됨
			프로세스가 단일 쓰레드로 동작할 때 또는
			프로세스가 다중 쓰레드를 사용하지만, 이 중 하나의 쓰레드만 힙에 접근할 때 사용
	
	 - dwMaximumSize
	 	0 으로 설정하면 필요할 때 크기가 자동 증가
	
	
	 - 사용 후 해제 시 HeapDestroy()를 사용하면 내부의 각 요소를 일일히 해제 할 필요가 없음
	
	
	3) Private heap 내 메모리 할당
	
	LPVOID WINAPI HeapAlloc(HANDLE hHeap, DWORD  dwFlags, SIZE_T dwBytes);
	
	- hHeap
		CreateHeap에서 반환된 힙에 대한 핸들
	- dwFlags
		메모리 할당 옵션
		HEAP_GENERATE_EXCEPTIONS,
		HEAP_NO_SERIALIZE
		HEAP_ZERO_MEMORY // 0으로 초기화
	- dwBytes
		할당 크기
	
	
	반환값: 할당 성공 시 주소, 실패 시 NULL
	
	글로벌힙에서 100 바이트 메모리 할당
		char *p1 = (char *)HeapAlloc(GetProcessHeap(), 0, 100);
	
	Private Heap 핸들 hHeap을 이용, 100바이트 메모리를 할당하면서 모든 바이트를 0으로 초기화 함
		char *p2 = (char *)HeapAlloc(hHeap, HEAP_ZERO_MEMORY, 100);
	
	
	4) Private heap에 할당된 메모리 해제
	BOOL WINAPI HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
	
	- hHeap
		Heap 핸들
	- dwFlags
		HEAP_NO_SERIALIZE 만 가능
	- lpMem
		해제할 메모리 주소
	
	- 반환값: 성공하면 0이 아닌 값, 실패 시 0
	
	HeapFree(hHeap, 0, p);
	
	5) GlobalAlloc(), LocalAlloc()
	16비트 시절의 유물, 현재는 글로벌 Heap에 할당하도록 HeapAlloc()를 사용
	HeapCreate()를 사용하지 않고 메모리 할당가능(글로벌 Heap)
	GlobalFree(), LocalFree() 사용하여 해제
